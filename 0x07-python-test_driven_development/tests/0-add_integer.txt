The ``0-add_integer`` test module
=================================

Using ``add_integer``
=================================

Usage
=====

Step one First import
``add_integer`` from the ``0-add_integer`` module:

::

     >>> add_integer = __import__('0-add_integer').add_integer

Normal cases:
=====

``add_integer(...)``` returns the addition of the tow arguments. For numbers, the value is equivalent to using the ``+`` operator.

::

     >>> add_integer(1, 2)
     3

::
     >>> add_integer(1, -2)
     -1

The function also works with floats values.

::

     >>> add_integer(3.1, 1.9)
     5

Note that Floats have to be casted to integers before addition.

::

     >>> add_integer(2.8, 0.3)
     3

::

      >>> add_integer(-2.8, -0.3)
      -3

Floats and non-floatng numbers can also be combined.

::

      >>> add_integer(2.5, -5)
      -3

The second argument is optional as its default is 98.

::
      >>> add_integer(4)
      102

Non-Numbers
===========

``add_integer()`` expects that both arguments are either integers or Floats.
If either argument is a non-integer and non-float, a TypeError is raised.

::

      >>> add_integer("hi", 3)
      Traceback (most recent call last):
      TypeError: a must be an integer

::
  
      >>> add_integer(2, "hi")
      Traceback (most recent call last):
      TypeError: b must be an integer

::
      >>> add_integer(None)
      Traceback (most recent call last):
      TypeError: a must be an integer

::

      >>> add_integer(3.4, None)
      Traceback (most recent call last):
      TypeError: b must be an integer

If both arguments are non-integers and non-floats, a TypeError message is only printed for the first argument.

::

      >>> add_integer("hi", "there")
      Traceback (most recent call last):
      TypeError: a must be an integer

The function will fail if an infinity is provided.

::
      >>> add_integer(float('inf'))
      Traceback (most recent call last):
      OverflowError: cannot convert float infinity to integer


::
 
      >>> add_integer(float('nan'))
      Traceback (most recent call last):
      ValueError: cannot convert float infinity to integer

And again with NaN numbers.

::
      >>> add_integer(float('nan'))
      Traceback (most recent call last):
      ValueError: cannot convert float to NaN to integer

::
      >>> add_integer(2, float('nan'))
      Traceback (most recent call last):
      ValueError: cannot convert float Nan to integer
